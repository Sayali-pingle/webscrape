import os.path
from llama_index import (
    VectorStoreIndex,
    SimpleDirectoryReader,
    StorageContext,
    load_index_from_storage,
)
import json
import datetime

class MemoryWithLogging:
    def __init__(self, memory_file='memory.json', log_file='logs.json'):
        self.memory_file = memory_file
        self.log_file = log_file
        self.memory = self.load_memory()
        self.logs = self.load_logs()

    def load_memory(self):
        if os.path.exists(self.memory_file):
            with open(self.memory_file, 'r') as file:
                return json.load(file)
        return {}

    def save_memory(self):
        with open(self.memory_file, 'w') as file:
            json.dump(self.memory, file)

    def load_logs(self):
        if os.path.exists(self.log_file):
            with open(self.log_file, 'r') as file:
                return json.load(file)
        return []

    def save_logs(self):
        with open(self.log_file, 'w') as file:
            json.dump(self.logs, file)

    def get_memory(self, user_id):
        return self.memory.get(user_id, {})

    def update_memory(self, user_id, key, value):
        if user_id not in self.memory:
            self.memory[user_id] = {}
        self.memory[user_id][key] = value
        self.save_memory()

    def clear_memory(self, user_id):
        if user_id in self.memory:
            del self.memory[user_id]
            self.save_memory()

    def log_query(self, user_id, query, response):
        timestamp = datetime.datetime.now().isoformat()
        self.logs.append({
            'user_id': user_id,
            'query': query,
            'response': response,
            'timestamp': timestamp
        })
        self.save_logs()

    def get_logs(self, user_id=None):
        if user_id:
            return [log for log in self.logs if log['user_id'] == user_id]
        return self.logs

# Initialize memory and logging
memory = MemoryWithLogging()

# Check if storage already exists
PERSIST_DIR = "./storage"
if not os.path.exists(PERSIST_DIR):
    # Load the documents and create the index
    documents = SimpleDirectoryReader("data").load_data()
    index = VectorStoreIndex.from_documents(documents)
    # Store it for later
    index.storage_context.persist(persist_dir=PERSIST_DIR)
else:
    # Load the existing index
    storage_context = StorageContext.from_defaults(persist_dir=PERSIST_DIR)
    index = load_index_from_storage(storage_context)

# Function to handle user queries
def handle_query(user_id, query, use_memory=True):
    # Retrieve user's memory if use_memory is True
    user_memory = memory.get_memory(user_id) if use_memory else {}

    # Combine the query with user's memory (if needed)
    combined_query = query  # Modify this if you need to include memory in the query

    # Query the index
    query_engine = index.as_query_engine()
    response = query_engine.query(combined_query)
    response_text = response.response  # Adjust based on the actual response structure

    # Log the query and response
    memory.log_query(user_id, query, response_text)

    # Update the memory based on the response (if applicable)
    # Example: if response includes memory updates
    # if 'memory_update' in response:
    #     for key, value in response['memory_update'].items():
    #         memory.update_memory(user_id, key, value)

    return response_text

# Example usage
user_id = 'user123'
query = "What are transformers?"
use_memory = True  # Change this to False if the user does not want to use their memory
response = handle_query(user_id, query, use_memory)
print(response)


#STREAMLIT

import streamlit as st
from streamlit_chat import message
from chat_func import Chatfunc

# Create an instance of the Chatfunc class
chatfunc = Chatfunc()

# Initialize session state
if 'messages' not in st.session_state:
    st.session_state.messages = []
if 'message_counter' not in st.session_state:
    st.session_state.message_counter = 0
if 'current_user_id' not in st.session_state:
    st.session_state.current_user_id = None

st.header("Chatbot")

# Display conversation history at the top
chat_container = st.container()

user_id = st.text_input("Type your user_id:")

# Check if user_id has changed
if user_id != st.session_state.current_user_id:
    st.session_state.messages = []
    st.session_state.message_counter = 0
    st.session_state.current_user_id = user_id

text_in = st.text_input("What's your question?")

if st.button("Send") and user_id:
    # Add user message to session state
    st.session_state.messages.append({
        "content": text_in, 
        "is_user": True, 
        "key": f"msg_{st.session_state.message_counter}"
    })
    st.session_state.message_counter += 1
    
    # Get the response from the Chatfunc class
    response = chatfunc.handle_query(user_id, text_in)
    
    # Add chatbot response to session state
    st.session_state.messages.append({
        "content": response, 
        "is_user": False, 
        "key": f"msg_{st.session_state.message_counter}"
    })
    st.session_state.message_counter += 1

# Display all messages in the chat container
with chat_container:
    for msg in st.session_state.messages:
        message(msg["content"], is_user=msg["is_user"], key=msg["key"])
